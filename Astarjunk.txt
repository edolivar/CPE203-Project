List<Node> openList = new LinkedList<>();
        List<Node> closedList = new LinkedList<>();
        List<Point> path = new LinkedList<>();

        openList.add(new Node(null, start));
        Node lowestFCost;

        while (openList.size() > 0) {

            openList = openList.stream()
                    //f = g + h, where g is distance between current node and start node and
                    //h is the distance from current node to end node
                    //Comparator.comparingDouble((point) -> point.distanceSquared(start) + point.distanceSquared(end))
                    .sorted(Comparator.comparing(Node::getF))
                    .collect(Collectors.toList());

//            for (Node n : openList) {
//                double d = n.getPosition().distanceSquared(end);
//                double somethinElse = d;
//            }

            lowestFCost = openList.get(0);
            double distance = lowestFCost.getPosition().distanceSquared(end);
            closedList.add(lowestFCost);
            openList.remove(0);

            if (withinReach.test(lowestFCost.getPosition(), end)) {
                Node current = lowestFCost;
                while (current != null) {
                    path.add(current.getPosition());
                    current = current.getParent();
                }
                long count = path.stream().count();
                path = path.stream()
                        .skip(count - 2)
                        .limit(1)
                        .collect(Collectors.toList());
                return path;

            }
            else {
                List<Point> adjacentPositions = potentialNeighbors.apply(lowestFCost.getPosition())
                        .filter(canPassThrough)
                        /*
                        .filter(pt ->
                                !pt.equals(start)
                                        && !pt.equals(end)
                                        && Math.abs(end.x - pt.x) <= Math.abs(end.x - start.x)
                                        && Math.abs(end.y - pt.y) <= Math.abs(end.y - start.y))
                                        */
                        .collect(Collectors.toList());

                List<Node> children = new LinkedList<>();

                for (Point pos : adjacentPositions) {
                    children.add(new Node(lowestFCost, pos));
                }

                for (Node child : children) {
                    boolean inClosedList = false;

                    for (Node closedChild : closedList) {
                        if (child.equals(closedChild)) {
                            inClosedList = true;
                        }
                    }

                    if (!inClosedList) {
                        double distanceToEnd = child.getPosition().distanceSquared(end);
                        double gCost = lowestFCost.getG() + 1;
                        child.setG(lowestFCost.getG() + 1);
                        child.setH(distanceToEnd);
                        child.setF(child.getG() + child.getH());

                        for (Node openNode : openList) {
                            if (child.equals(openNode) && child.getG() > openNode.getG()) {
                                continue;
                            }
                        }

                        openList.add(child);
                    }
                }
            }

        }

        List<Point> emptyList = new LinkedList<>();
        return emptyList;
    }
