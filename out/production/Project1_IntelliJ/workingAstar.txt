List<Node> openList = new LinkedList<>();
        List<Node> closedList = new LinkedList<>();
        List<Point> path = new LinkedList<>();

        Node currentNode = new Node(null, 0, start.distanceSquared(end), start);
        openList.add(currentNode);

        while (!withinReach.test(currentNode.getPosition(), end)) {

            List<Point> adjacentPositions = potentialNeighbors.apply(currentNode.getPosition())
                    .filter(canPassThrough)
                    .collect(Collectors.toList());

            List<Node> children = new LinkedList<>();

            for (Point pos : adjacentPositions) {
                Node newChildNode = new Node(currentNode, currentNode.getG() + 1, pos.distanceSquared(end), pos);
                boolean inClosedList = false;
                for (Node closedNode : closedList) {
                    if (closedNode.equals(newChildNode)) {
                        inClosedList = true;
                    }
                }
                if (!inClosedList) {
                    children.add(newChildNode);
                }
            }

            for (Node child : children) {
                boolean inOpenList = false;
                for (Node openNode : openList) {
                    if (openNode.equals(child)) {
                        inOpenList = true;
                    }
                }
                if (!inOpenList) {
                    openList.add(child);
                }
                for (Node openNode : openList) {
                    if (openNode.getG() > child.getG() && openNode.getPosition().equals(child.getPosition())) {
                        openNode.setG(child.getG());
                        //openNode.setH(child.getH());
                        openNode.setF(child.getG() + child.getH());
                        openNode.setParent(child.getParent());
                    }
                }
            }
            closedList.add(currentNode);
            openList.remove(currentNode);

            if (!openList.isEmpty()) {
                openList = openList.stream()
                        //f = g + h, where g is distance between current node and start node and
                        //h is the distance from current node to end node
                        //Comparator.comparingDouble((point) -> point.distanceSquared(start) + point.distanceSquared(end))
                        .sorted(Comparator.comparing(Node::getF))
                        .collect(Collectors.toList());

                currentNode = openList.get(0);
            }
            else {
                return path;
            }
        }
        while (currentNode.getParent() != null) {
            path.add(0, currentNode.getPosition());
            currentNode = currentNode.getParent();
        }

        path = path.stream()
                .limit(1)
                .collect(Collectors.toList());
        return path;
